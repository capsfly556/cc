/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.openapitools.model.FoodProvider;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2024-10-05T01:59:00.934263-04:00[America/Toronto]",
    comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "foodproviders", description = "the foodproviders API")
public interface FoodprovidersApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * DELETE /foodproviders/{foodProviderId} : Delete a food provider.
   *
   * @param foodProviderId The unique identifier of the food provider. (required)
   * @return Food provider deleted successfully. (status code 204) or Food provider not found.
   *     (status code 404)
   */
  @Operation(
      operationId = "foodprovidersFoodProviderIdDelete",
      summary = "Delete a food provider.",
      responses = {
        @ApiResponse(responseCode = "204", description = "Food provider deleted successfully."),
        @ApiResponse(responseCode = "404", description = "Food provider not found.")
      })
  @RequestMapping(method = RequestMethod.DELETE, value = "/foodproviders/{foodProviderId}")
  default ResponseEntity<Void> foodprovidersFoodProviderIdDelete(
      @Parameter(
              name = "foodProviderId",
              description = "The unique identifier of the food provider.",
              required = true,
              in = ParameterIn.PATH)
          @PathVariable("foodProviderId")
          String foodProviderId) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /foodproviders/{foodProviderId} : Retrieve details of a specific food provider.
   *
   * @param foodProviderId The unique identifier of the food provider. (required)
   * @return Food provider details retrieved successfully. (status code 200) or Food provider not
   *     found. (status code 404)
   */
  @Operation(
      operationId = "foodprovidersFoodProviderIdGet",
      summary = "Retrieve details of a specific food provider.",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Food provider details retrieved successfully.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = FoodProvider.class))
            }),
        @ApiResponse(responseCode = "404", description = "Food provider not found.")
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/foodproviders/{foodProviderId}",
      produces = {"application/json"})
  default ResponseEntity<FoodProvider> foodprovidersFoodProviderIdGet(
      @Parameter(
              name = "foodProviderId",
              description = "The unique identifier of the food provider.",
              required = true,
              in = ParameterIn.PATH)
          @PathVariable("foodProviderId")
          String foodProviderId) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"phoneNumber\" : \"phoneNumber\", \"name\" : \"name\", \"location\" : \"location\", \"hoursOfOperation\" : \"hoursOfOperation\", \"foodProviderID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"menu\" : [ { \"image\" : \"image\", \"cost\" : 0.8008281904610115, \"name\" : \"name\", \"description\" : \"description\", \"menuItemID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"image\" : \"image\", \"cost\" : 0.8008281904610115, \"name\" : \"name\", \"description\" : \"description\", \"menuItemID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PUT /foodproviders/{foodProviderId} : Update a food provider&#39;s details.
   *
   * @param foodProviderId The unique identifier of the food provider. (required)
   * @param foodProvider Updated food provider object. (required)
   * @return Food provider updated successfully. (status code 200) or Failed to update food
   *     provider. (status code 400) or Food provider not found. (status code 404)
   */
  @Operation(
      operationId = "foodprovidersFoodProviderIdPut",
      summary = "Update a food provider's details.",
      responses = {
        @ApiResponse(responseCode = "200", description = "Food provider updated successfully."),
        @ApiResponse(responseCode = "400", description = "Failed to update food provider."),
        @ApiResponse(responseCode = "404", description = "Food provider not found.")
      })
  @RequestMapping(
      method = RequestMethod.PUT,
      value = "/foodproviders/{foodProviderId}",
      consumes = {"application/json"})
  default ResponseEntity<Void> foodprovidersFoodProviderIdPut(
      @Parameter(
              name = "foodProviderId",
              description = "The unique identifier of the food provider.",
              required = true,
              in = ParameterIn.PATH)
          @PathVariable("foodProviderId")
          String foodProviderId,
      @Parameter(
              name = "FoodProvider",
              description = "Updated food provider object.",
              required = true)
          @Valid
          @RequestBody
          FoodProvider foodProvider) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /foodproviders : Retrieve a list of all food providers.
   *
   * @return Successfully retrieved food providers. (status code 200) or No food providers found.
   *     (status code 404)
   */
  @Operation(
      operationId = "foodprovidersGet",
      summary = "Retrieve a list of all food providers.",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successfully retrieved food providers.",
            content = {
              @Content(
                  mediaType = "application/json",
                  array = @ArraySchema(schema = @Schema(implementation = FoodProvider.class)))
            }),
        @ApiResponse(responseCode = "404", description = "No food providers found.")
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/foodproviders",
      produces = {"application/json"})
  default ResponseEntity<List<FoodProvider>> foodprovidersGet() {

    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "[ { \"phoneNumber\" : \"phoneNumber\", \"name\" : \"name\", \"location\" : \"location\", \"hoursOfOperation\" : \"hoursOfOperation\", \"foodProviderID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"menu\" : [ { \"image\" : \"image\", \"cost\" : 0.8008281904610115, \"name\" : \"name\", \"description\" : \"description\", \"menuItemID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"image\" : \"image\", \"cost\" : 0.8008281904610115, \"name\" : \"name\", \"description\" : \"description\", \"menuItemID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] }, { \"phoneNumber\" : \"phoneNumber\", \"name\" : \"name\", \"location\" : \"location\", \"hoursOfOperation\" : \"hoursOfOperation\", \"foodProviderID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"menu\" : [ { \"image\" : \"image\", \"cost\" : 0.8008281904610115, \"name\" : \"name\", \"description\" : \"description\", \"menuItemID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"image\" : \"image\", \"cost\" : 0.8008281904610115, \"name\" : \"name\", \"description\" : \"description\", \"menuItemID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] } ]";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /foodproviders : Add a new food provider to the service.
   *
   * @param foodProvider A new food provider object. (required)
   * @return Food provider added successfully. (status code 201) or Failed to add food provider.
   *     (status code 400)
   */
  @Operation(
      operationId = "foodprovidersPost",
      summary = "Add a new food provider to the service.",
      responses = {
        @ApiResponse(responseCode = "201", description = "Food provider added successfully."),
        @ApiResponse(responseCode = "400", description = "Failed to add food provider.")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/foodproviders",
      consumes = {"application/json"})
  default ResponseEntity<Void> foodprovidersPost(
      @Parameter(
              name = "FoodProvider",
              description = "A new food provider object.",
              required = true)
          @Valid
          @RequestBody
          FoodProvider foodProvider) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
